/*
B树是为磁盘或其他直接存储设备设计的一种平衡查找树,每一个结点箭头指向的我们称为入度，
指出去的称为出度。树结构的结点入度都是1，不然就变成图了.
所以我们一般说树的度就是指树结点的出度，也就是一个结点的子结点个数。

定义B树(假设一棵树的最小度数为M):
1.每个结点至少有M-1个关键码，至多有2M-1个关键码；
2.除根结点和叶子结点外，每个结点至少有M个子结点，至多有2M个子结点；
3.根结点至少有2个子结点，唯一例外是只有根结点的情况，此时没有子结点；
4.所有叶子结点在同一层。

每个结点存放着关键字和指向子结点的指针，看出指针比关键码多一个。

当M=2时，B树为最简单的，每个内结点有2个、3个或4个子女，也称2-3-4树。
*/


# define M 2 
/* B树的最小度数M>=2 
* 每个非根结点必须至少有M-1个关键字。每个非根结点至少有M个子女 
* 每个结点可包含至多2M-1个关键字。所以一个内结点至多可以有2M个子女 
*/ 
struct btnode{ /* B树结点 */ 
int keyNum; /* 节点中键的数目 */ 
int k[2*M-1]; /* 键 */ 
struct btnode* p[2*M]; /* 指向子树的指针 */ 
bool isleaf; 
}; 

struct searchResult{ 
struct btnode *ptr; /* 数据所在节点指针 */ 
int pos; /* 数据在节点中位置 */ 
};